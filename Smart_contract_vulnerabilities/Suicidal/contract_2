pragma solidity ^0.8.0;

contract MyContract {
    address owner;
    mapping(address => uint256) public balances;
    
    event Deposit(address indexed _from, uint256 _amount);
    event Withdrawal(address indexed _to, uint256 _amount);
    event BalanceChecked(address indexed _user, uint256 _balance);
    
    constructor() {
        owner = msg.sender;
    }
    
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0.");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance.");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawal(msg.sender, amount);
    }
    
    function checkBalance() public {
        uint256 balance = balances[msg.sender];
        emit BalanceChecked(msg.sender, balance);
    }
    
    function close() public {
        require(msg.sender == owner, "Only the owner can close the contract.");
        selfdestruct(payable(owner));
    }
}
